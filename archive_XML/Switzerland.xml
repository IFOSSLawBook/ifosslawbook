<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2017-05-18</date>
</articleinfo>
<section id="chap.switzerland">
<title>Switzerland</title>
<simpara>author:[Jaccard,Michel]
author:[Ancelle,Juliette]</simpara>
<section id="_introduction_to_software_protection_under_swiss_law">
<title>Introduction to software protection under Swiss Law</title>
<section id="_applicable_law">
<title>Applicable Law</title>
<simpara>Under Swiss law, the protection of software is principally regulated by the Federal Copyright Act of October 9, 1992<footnote><simpara>Swiss Federal Act on copyright and neighboring rights Swiss Copyright Act (or SCA)&#8201;&#8212;&#8201;RS 231.1.</simpara></footnote>, last revised on July 1st, 2008 (&#8220;SCA&#8221;).</simpara>
</section>
<section id="_object_of_protection">
<title>Object of Protection</title>
<section id="_definition_of_software">
<title>Definition of software</title>
<simpara>Pursuant to Section 2, paragraph 3 SCA, computer programs are considered to be works under Swiss law, and as such, can be protected by copyright<footnote><simpara>Section 2, paragraph 3 SCA: &#8220;Computer programs (software) are also considered as works&#8221;.</simpara></footnote>. Computer programs are purposely protected in a separate category of works from literary works<footnote><simpara>D. Barrelet / W.Egloff, Le nouveau droit d&#8217;auteur, Commentaire de la Loi Fédérale sur le droit d&#8217;auteur et les droits voisins, 3rd ed., Berne 2008, 2 No. 23; ATF 125 III 263, 269.</simpara></footnote>. The notion of computer programs as used in the Copyright Act includes any completed process written in a programming language with the purpose of performing a designated task<footnote><simpara>Message from the Federal Council, FF 1989 III p. 488 ; V. Salvadé, La protection du support multimédia au regard du droit d&#8217;auteur, in Semaine Judiciaire (SJ) 1996, p. 258.</simpara></footnote>. The protection of computer programs comprises the protection of the source code and of the object code of the computer program, but it does not cover the ideas or principles on which the software is based (algorithm, formula, etc.)<footnote><simpara>E. Neff / M. Arn, Uhreberrechtlicher Schutz des Software, in: Schweizerisches Immaterialgüter- und Wettbewerbsrecht, II/2, p. 121ss.</simpara></footnote>. It is also generally understood that the copyright protection of computer programs does not extend to the development nor the user&#8217;s documentation, which can however be copyrighted separately to the extent that it meets the requirement of protection for literary works as stated in Section 2 paragraph 1 SCA<footnote><simpara>F. Dessemontet, Le droit d&#8217;auteur, Lausanne 1999, p. 84ss.</simpara></footnote>.</simpara>
<simpara>For the purpose of this Swiss chapter, the terms of &#8220;software&#8221; or &#8220;computer software&#8221; will be deemed equivalent to &#8220;computer program&#8221;, as defined above. We are aware of the distinction drawn between a software and a computer program in relation with Open Source and within numerous Open Source licenses<footnote><simpara>See in particular the Open Source Definition of the Open Source Initiative (<ulink url="http://www.opensource.org/docs/osd">http://www.opensource.org/docs/osd</ulink>) and the GNU GPL vers. 3 (<ulink url="http://www.opensource.org/licenses/gpl-3.0.html">http://www.opensource.org/licenses/gpl-3.0.html</ulink>).</simpara></footnote>. A debate exists among Swiss scholars regarding this differentiation, the main issue being related to the inclusion of the documentation in the notion of software and therefore in the definition of protected work, with the consequence that the documentation should be covered by the exclusive rental right (see I.4 (b) below). The terms of &#8220;software&#8221; and &#8220;computer program&#8221; are however being used interchangeably in the French version of the Copyright Act as well as in the Message of the Federal Council which preceded the adoption of the revised Act, and we will therefore consider both terms to fall under the same definition in relation to Swiss copyright law.</simpara>
</section>
<section id="_protected_software">
<title>Protected software</title>
<simpara>In order to be protected under Swiss copyright law, computer software needs to meet the requirement of individual character, which is the basic requirement for each protected work<footnote><simpara>See Section 2, paragraph 1 SCA : &#8220;A work is understood, whatever its value or purpose may be, as any creation of the mind, whether literary or artistic, that has an individual character&#8221;.</simpara></footnote>. Such individual character should only be found in the structure of the program, and not in the ideas or the software&#8217;s algorithms or logic, which are not protected by copyright. This requirement for computer programs must however be understood as a requirement of novelty or an absence of triviality<footnote><simpara>Message from the Federal Council of June 19, 1989, FF1989 III 465, ad p. 508.</simpara></footnote>. Thus, computer software will be deemed to possess sufficient individual character if experts find it original and different from other existing software by the comparison of their source and object codes<footnote><simpara>&#8220;AUTO-CAD&#8221; case, Revue Suisse de Propriété Intellectuelle (RSPI) 1989, p. 58.</simpara></footnote> and to the extent that the author had sufficient leeway at his/her disposal in the writing of the codes<footnote><simpara>ATF 113 II 196; Message from the Federal Council of June 19, 1989, FF1989 III 465, ad p. 508.</simpara></footnote>.</simpara>
</section>
<section id="_unprotected_and_public_domain_software">
<title>Unprotected and public domain software</title>
<simpara>As a consequence of the requirements set forth in Section 2 of the Copyright Act, Swiss law shall not protect software that does not possess an individual character. Thus, a computer program that professionals will find trivial in relation to preexisting ones, when comparing their codes, and for which the author has not showed any creativity in the writing of the code, shall not be considered as a protected work under copyright law, and can therefore be freely used, to the extent that it is not limited by existing covenants governing it or by the general rules of unfair competition<footnote><simpara>The applicable rules of unfair competition can be found in the Federal Act on Unfair Competition (UCA) of December 19, 1986, RS 241.</simpara></footnote>. Furthermore, the protection of software developed by a computer is discussed under Swiss law, as some specialized authors consider that the human intervention is too remote to trigger the legal protection of the work<footnote><simpara>F. Dessemontet, Commentaire romand Propriété Intellectuelle, Lausanne 2013, LDA 2N 63.</simpara></footnote>.</simpara>
<simpara>Under Swiss law, two categories of software will be considered as public domain: (i) software for which the protection has expired through lapse of time (50 years after the death of the author; see I.6 below for more details), and (ii) software for which the author has voluntarily given up his/her rights and which he/she has offered for the use of the public. This type of public domain software is characterized by the absence of exclusive enforceable rights on the software and the free availability of the computer program, but not necessarily of the source code. Due to the absence of a registration requirement for copyrighted works in Swiss copyright law however, the author of the software who wishes to make it a public domain software must express it clearly, for instance through a notice attached to each copy of the software<footnote><simpara>M. J. Widmer, Open Source Software&#8201;&#8212;&#8201;Uhreberrechtliche Aspekte freier Software, Bern 2003, p. 44.</simpara></footnote>. The public domain software must be distinguished from the Free and Open Source Software (FOSS)<footnote><simpara>Free and Open Source Software is software subject to an Open Source license; See definition below in II.1.</simpara></footnote>: in the case of FOSS, the author or co-authors license their rights to the users by giving access to the source code but remain the valid holders of the copyright on the software, whereas public domain software can be validly used, modified, or published without the need for the issuance of a license.</simpara>
</section>
</section>
<section id="_owner_of_rights">
<title>Owner of rights</title>
<section id="_author_as_a_natural_person">
<title>Author as a natural person</title>
<simpara>Pursuant to Section 6 SCA, an author is the natural person who created the protected work<footnote><simpara>Section 6 SCA : &#8220;The author is the natural person who created the work&#8221;.</simpara></footnote>. Thus, in the case of computer software, the programmer who created the software will be considered to be its author in the sense of copyright law, and therefore will own the copyright to the protected work<footnote><simpara>Section 9 SCA : &#8220;The author has the exclusive right on his/her work and the right to be credited as its author&#8221; ; Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 17 No. 2.</simpara></footnote>. As a result and contrary to what is the case in the USA for example<footnote><simpara>Section 201 (a) of the US Copyright Act of 1976, Pub. L. 94-553, 90 Stat. 2541, as amended through July 1, 200;, Community for Creative Non-Violence v. Reid, 490 U.S. 730, 109 S.Ct. 2166, 104 L.Ed.2d 811 (1989).</simpara></footnote>, a corporate entity or a legal person cannot be the &#8220;original&#8221; author of a computer program, even when it has for instance financed the development of the program. In such a case however, the corporate entity may benefit from the mechanism of legal assignment of certain exclusive rights in favor of the employer regarding software created by an employee (see section I.3 below).</simpara>
</section>
<section id="_joint_work_coauthors">
<title>Joint work : coauthors</title>
<simpara>In the development of a computer program, there is often more than one person involved, and therefore more than one author in the sense of copyright law. Most of the time, the developed software will be considered as a joint work, created by several coauthors. Pursuant to Section 7 SCA, a coauthor is a natural person who contributed to the creation of a work by bringing in his/her creative input<footnote><simpara>Section 7, paragraph 1 SCA : &#8220;When several persons have contributed in their capacity as authors, the copyright belongs to them jointly&#8221; ; Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 7 No. 4.</simpara></footnote>. The two main criteria are thus (i) the objective creative collaboration but also (ii) the intent of the authors to create a work together. The coauthor of a protected work must be distinguished from an auxiliary, who simply performs a task he/she has been entrusted with, with no provision for any creative input, and who therefore does not own any rights to the protected work<footnote><simpara>Case 4A_638/2009 &#8220;Guide Orange&#8221; from the Swiss Supreme Court from April 1st, 2010, paragraph 4.3.</simpara></footnote>. In addition, the determining factor that will allow a work to be deemed a joint work and not a derivative work is the accepted and voluntary joint creative collaboration on a common and unique creation within an agreed period of time.</simpara>
<simpara>In the case of a joint work, the coauthors are the joint holders of the copyright, with the consequence that they can only use the joint work in common or with each coauthor&#8217;s agreement and that one coauthor cannot dispose of his/her share without the consent of the others<footnote><simpara>ATF 129 III 715, JdT 2004, p. 271, cons. 3.1.</simpara></footnote>. The coauthors have however a duty to make the use of the work possible and they cannot withhold their authorization of use without cause<footnote><simpara>Section 7, paragraph 2 in fine SCA.</simpara></footnote>. Each coauthor has the standing to represent the joint tenancy of coauthors in case of infringement, but this does not affect the joint ownership of the copyright by all coauthors<footnote><simpara>Section 7, paragraph 3 SCA ; Case 4C.138/2003 &#8220;Malbuner II&#8221; of the Swiss Supreme Court, sic ! 2004.</simpara></footnote>.</simpara>
<simpara>The legal regime of the Copyright Act applicable to coauthors has been construed by the Swiss Supreme Court as establishing a &#8220;sui generis joint ownership&#8221;, with the consequence that it does not correspond to any regime of co-ownership already existing under Swiss law<footnote><simpara>ATF 129 III 715, JdT 2004, p. 271, cons. 3.2.</simpara></footnote>. Aside from the mandatory rules on co-authorship and in particular on the joint ownership of the joint work set out in Section 7 SCA, the coauthors may choose to regulate their relationship via an express agreement, regulating for instance the decision making process or the liability of the coauthors. In the absence of a specific agreement, the coauthors shall form an <emphasis>unregistered partnership</emphasis>, regulated by Sections 530 to 551 of the Swiss Code of Obligations (SCO)<footnote><simpara>Swiss Code of Obligations (or SCO)&#8201;&#8212;&#8201;RO 27 321.</simpara></footnote>, the main consequence being that all decisions are to be made unanimously (Section 534 SCO).</simpara>
</section>
<section id="_copyright_assignment">
<title>Copyright assignment</title>
<simpara>Another specificity of computer programs in comparison to other protected works relates to the context of their creation. Most of the time, software is developed within a company by programmers who are employees and have in fact been hired for the purpose of developing software. Thus, taking into consideration the tension between the general principle of designating a natural person only as an author and the economic need of companies investing in the software development, the Swiss legislator has established an automatic legal assignment of rights&#8201;&#8212;&#8201;absent an agreement to the contrary between the parties&#8201;&#8212;&#8201;according to which only the employer is entitled to benefit from the rights of use on a software created by the employee as part of his/her work obligations<footnote><simpara>Section 17 SCA : &#8220;The employer is the only one authorized to exercise the exclusive rights of use on software created by the worker in the performance of his/her activities at the employer&#8217;s service and consistently with his/her contractual obligations&#8221;; J.M. Lutz, Les programmes d&#8217;ordinateur, p. 45s.</simpara></footnote>. The two criteria for the application of this provision are therefore that the programmer developed the software (i) when he/she was <emphasis>at the employer&#8217;s</emphasis> service and (ii) while <emphasis>performing his/her employment obligations</emphasis>. This rule thus only applies when an employment relationship in the sense of Swiss labor law exists, and, as already mentioned, can be modified by an agreement between the parties<footnote><simpara>Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 17 No. 6 ; R. Wyler, Droit du travail, Berne 2008, p. 3810-1.</simpara></footnote>.</simpara>
<simpara>Where no employment relationship exists and the software is developed by a self-employed programmer upon a client&#8217;s request, the determination of the original ownership of the rights will depend on the interpretation of the intent of the parties. Under Swiss law, to determine whether the copyright on the created work has been assigned or whether the author has only granted a license, one must interpret the intent of the parties according to the theory of purpose<footnote><simpara>The theory of purpose (théorie de la finalité) rests upon the purpose of the contract and assumes that, in case of doubt, the transfer of rights intended by the parties extends only to the rights that are necessary to achieve that purpose; K. Troller, Manuel du droit Suisse des biens immatériels, vol. II, Bâle 1996, p. 695; Sic! 1997, p. 382.</simpara></footnote>, although in case of doubt on the purpose, a court will favor the granting of a license instead of a full assignment of copyright. Swiss copyright law indeed does not incorporate the concept of &#8220;work for hire&#8221; as it exists in the USA<footnote><simpara>§ 101 of the Copyright Act of 1976, Pub. L. 94-553, 90 Stat. 2541, as amended through July 1, 2005.</simpara></footnote>, and the ownership over the rights will therefore be determined on a case-by-case basis, interpreting the intent of the parties. In the case where it is established that only a license has been granted, the most problematic question remains the question of exclusivity, and whether the parties intended any license of rights to be exclusive. It is generally admitted that exclusivity has been granted in cases where the software incorporates trade secrets, when its development has only been possible thanks to the client&#8217;s knowledge or when the source code has been handed over<footnote><simpara>J.M. Lutz, Les programmes d&#8217;ordinateur, p. 187.</simpara></footnote>.</simpara>
<simpara><emphasis>Best practices</emphasis> : In light of the above, we would recommend to always specify in writing in case of outsourced development work : (1) who will be the author of the created software, (2) whether a license will be granted for the created software, and (3) in such a case, whether the license will be exclusive or not.</simpara>
</section>
</section>
<section id="_scope_of_protection">
<title>Scope of protection</title>
<section id="_exclusive_rights">
<title>Exclusive rights</title>
<simpara>As is the case for any protected work, the author of computer software benefits from exclusive rights over his/her work. Thus, as provided for in Section 10 SCA, the author of computer software has the exclusive right to decide how, when and whether his/her work shall be used<footnote><simpara>Section 10, paragraph 1 SCA : &#8220;The author has the right to decide if, when and how his/her work shall be used&#8221;.</simpara></footnote>. Section 10 SCA contains an illustrative list of what is covered by this exclusive right of use of the work<footnote><simpara>Pursuant to Section 10, paragraph 2 SCA, the exclusive right to use the work includes but is not limited to the right to make copies of the work, the right to distribute the copies, the right to make the work available to the public (&#8230;).</simpara></footnote>. These exclusive rights are the patrimonial rights of the author, as opposed to his/her moral rights, and can be freely assigned or granted to others by the author, usually in exchange for financial compensation. The patrimonial exclusive rights are, however, not limited to lucrative use and also cover not-for-profit use of the work<footnote><simpara>C. Gasser, Der Eigengebrauch im Urheberrecht, p. 39.</simpara></footnote>. As regards computer programs, the most relevant right is the right to make copies and to distribute them, which includes online distribution according to the prevailing opinion among Swiss authors<footnote><simpara>Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 10 No. 16; R. Hilty, Sic ! 1997, p. 134 ; E. Neff/ M. Arn, Urheberrechtlicher Schutz der Software, in : R. von Büren / L. David (ed.), Schweizeriches Immaterialgüter- und Wettbewerbsrecht, vol. II/2, Basel 1998, p. 230ss.</simpara></footnote>.</simpara>
</section>
<section id="_specific_rights_for_computer_software_under_swiss_law">
<title>Specific rights for computer software under Swiss law</title>
<simpara>In addition to the general patrimonial exclusive rights to which every author is entitled under the Swiss Copyright Act, authors of computer software benefit from two additional exclusive rights: (i) an exclusive rental right<footnote><simpara>Section 10, paragraph 3 SCA.</simpara></footnote> and (ii) a utilization right<footnote><simpara>Section 12, paragraph 2 SCA.</simpara></footnote>.</simpara>
<simpara>Under Swiss law, the right of distribution does not include the exclusive right to rent out the protected work. Thus, only authors of computer software may own an exclusive rental right on their created work<footnote><simpara>The Swiss legislator decided to include this additional right to harmonize its legislation with the European Directive on the legal protection of computer programs, in particular its Section 4.</simpara></footnote>. This provision means that the sale of a copy of the software does not deprive its author of the right to rent it out, i.e. to allow a third party to use it in exchange for financial compensation. Consequently, and contrary to what is the case for other works protected by copyright<footnote><simpara>See Section 13 SCA.</simpara></footnote>, the user who acquired the software is not entitled to rent it out without infringing upon the author&#8217;s exclusive right, unless an express license has been granted<footnote><simpara>J.M. Lutz, Les programmes d&#8217;ordinateurs. p. 189.</simpara></footnote>.</simpara>
<simpara>The second exclusive right specific to computer software is a utilization right. Pursuant to Section 12, paragraph 2 SCA, computer software that has been lawfully sold <emphasis>can be used or sold again</emphasis>. Swiss copyright law therefore expressly protects the right of the lawful owner of the protected software to use it<footnote><simpara>Concerning most works protected by copyright, the owner of a copy of the work will only enjoy the work, i.e. read a book, listen to a record or watch a movie, but with computer software, the legislator wanted to protect a professional use of the protected work.</simpara></footnote>. This use is however limited by the definition of what a lawful utilization of the software is: pursuant to Section 17 of the Ordinance on Copyright and Neighboring Rights<footnote><simpara>Ordinance on copyright and neighboring rights (CRO) from April 26, 1993 and last revised on July 1, 2008, RS 231.11 ; Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 12 No.13.</simpara></footnote>, lawful utilization of computer software is utilization by the legitimate buyer in compliance with the contractual conditions of the sale. This specific right of utilization for computer software compensates for the fact that the private use exception for copyrighted work does not apply to software<footnote><simpara>Section 19, paragraph 4 SCA ; Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 19 No. 29.</simpara></footnote>.</simpara>
</section>
<section id="_moral_rights">
<title>Moral Rights</title>
<simpara>The author of a computer program, like any author in the sense of the Swiss Copyright Act, owns moral rights to his/her creation. This notion covers two main exclusive rights: (i) the right to be credited as the author of the work<footnote><simpara>Section 9 SCA : &#8220;The author has the exclusive right on his/her work and the right to be credited as the author&#8221;.</simpara></footnote> and (ii) the right to the respect of the integrity of the work<footnote><simpara>Section 11 SCA : &#8220;The author has the exclusive right to decide : (a) if, when and how his/her work can be modified ; (b) if, when and how his/her work can be used for the creation of a derivative or a collective work.&#8221;</simpara></footnote>. The moral rights are strictly attached to the personality of the author or of his/her heirs and therefore cannot be alienated nor transferred to a third party by any means<footnote><simpara>Case &#8220;Baupläne&#8221;, Sic ! 2004, p. 299.</simpara></footnote>. The transfer of the patrimonial rights does not entail the transfer of the moral rights.</simpara>
<simpara>Thus, regarding the right to paternity of the work, the author of the work will always be entitled to be credited as the author but will also have the right to choose to remain anonymous. The author can however waive this right, which is often the case for employees, renouncing in their employment contract to exercise their right to be credited for their creation, although they remain the sole author(s) of the work<footnote><simpara>R. Wyler, Droit du travail, Berne 2008, p. 381 ; V. Salvadé, La protection du support multimédia au regard du droit d&#8217;auteur, in SJ 1996, p. 265.</simpara></footnote>.</simpara>
<simpara>As regards the right to the integrity of the work, the author can always authorize third parties to modify his/her work by contract but pursuant to Section 11, paragraph 2 SCA, the author retains the right to oppose any modification that would harm his/her personality. This right can be waived by the author, but will in any case have very limited impact in relation to computer software, since any modification of the code or of the programming language will hardly be found to be harmful to the author&#8217;s personality<footnote><simpara>V. Salvadé, op. cit., p. 265.</simpara></footnote>.</simpara>
</section>
</section>
<section id="_exceptions_to_the_exclusive_rights">
<title>Exceptions to the exclusive rights</title>
<simpara>Two provisions of the Copyright Act are to be mentioned as exceptions to the exclusive rights.</simpara>
<simpara>Firstly, Section 21 SCA authorizes the lawful owner of the software to obtain information on the software&#8217;s interfaces through the reverse engineering of the program&#8217;s code. The reverse engineering, which can be operated by the owner of the software or by an authorized third party, is however limited by law to the case of obtaining necessary information for the development or use of interoperable software and this information cannot be disclosed to unauthorized third parties<footnote><simpara>G. Fröhlich-Bleuler, Pratique Juridique Actuelle (AJP/PJA) 1995, p. 578.</simpara></footnote>. Thus, the reverse engineering of software is only valid under Swiss law when the two following conditions are met: (i) the information on the interface must be necessary for the development of interoperability, and (ii) the reverse engineering must be operated by an authorized person, i.e. the lawful owner of the software or a third party mandated by him/her.</simpara>
<simpara>The second relevant exception to the exclusive rights of the author resides in the right of the person authorized to use the software to make a backup copy<footnote><simpara>Section 24, paragraph 2 SCA.</simpara></footnote>. This right cannot be limited by contract, but is limited to <emphasis>one copy only</emphasis>, and only belongs to the lawful user of the software as described above<footnote><simpara>G. Fröhlich-Bleuler, PJA 1995, p. 573.</simpara></footnote>. Any copy made for any other purpose, even by the lawful user, will be deemed an infringement on the author&#8217;s exclusive right. The rightful user is also authorized to make temporary copies, insofar as they are technically necessary for the transmission of the work to a third party or for any other lawful utilization of the work, and that they do not have any independent economic significance<footnote><simpara>Section 24a SCA.</simpara></footnote>.</simpara>
</section>
<section id="_term_of_protection">
<title>Term of protection</title>
<simpara>Under Swiss law, the general term for protection of copyright for computer software is fifty (50) years after the death of the author<footnote><simpara>Section 29, paragraph 2, lit. a SCA ; see also J-M Lutz, Les programmes d&#8217;ordinateurs, p. 201.</simpara></footnote>. This differs from the longer term of protection for other copyrighted works that lasts for seventy (70) years after the death of the author.</simpara>
<simpara>In the case of co-authorship, the protection of the software ends fifty (50) years after the death of the last living coauthor<footnote><simpara>Section 30, paragraph 1, lit. a SCA.</simpara></footnote>. If each coauthor&#8217;s input, however, can be separated from the rest of the work, the protection for each separate input will end fifty (50) years after the death of its author<footnote><simpara>Section 30, paragraph 2 SCA.</simpara></footnote>.</simpara>
<simpara>As regards to derivative work, the term of protection will differ for the original work and for the additional creation, each part being protected by copyright for fifty (50) years after the death of its respective author<footnote><simpara>Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 30 No. 5.</simpara></footnote>.</simpara>
</section>
<section id="_special_measures">
<title>Special measures</title>
<simpara>As a signatory of the WIPO Copyright Treaty (WCT)<footnote><simpara>WIPO Copyright Treaty of December 20, 1996, RS 0.231.151.</simpara></footnote> and the WIPO Performances and Phonograms Treaty (WPPT)<footnote><simpara>WIPO Performances and Phonograms Treaty of December 20, 1996, RS 0.231.171.1.</simpara></footnote>, Switzerland has adopted a provision in the Copyright Act for the protection of effective technological measures<footnote><simpara>See Section 11 WCT and 18 WPPT ; See also the Message of the Federal Council for the adoption of the two WIPO treaties and the modification of Swiss copyright law, FF 2006, p. 3297.</simpara></footnote>. Pursuant to Section 39a SCA, the removal or circumvention of effective technological measures used for the protection of copyrighted works or other protected objects is prohibited. Swiss law however provides for an exception to this rule: circumventing protective technological measures will not be punished by law if it is performed for the sole purpose of allowing an authorized use of the protected work<footnote><simpara>M. Jaccard/ J. Heumann, Commentaire romand Propriété Intellectuelle, Lausanne 2013, LDA 39a N 25 ff.</simpara></footnote>.</simpara>
<simpara>The Swiss Copyright Act makes it a criminal offence to violate the provision on the protection of technological measures by circumventing or removing the said effective measures for the purpose of unlawfully using the protected work, but also by selling or offering products allowing such actions (Section 69a SCA). The infringer, who must have acted intentionally to be held criminally liable, will be punished by a fine, or by imprisonment in the case that he/she is a professional infringer. In addition, it must be noted that once an infringement to the rules concerning the protection of technological measures occurs, a presumption exists that it has created a threat to copyright and the author will therefore be entitled to damages without being required to establish any actual infringement to copyright<footnote><simpara>See Section 62, paragraph 1bis SCA ; FF 2006, p. 3297.</simpara></footnote>.</simpara>
</section>
</section>
<section id="_analysis_of_foss_under_swiss_law">
<title>Analysis of FOSS under Swiss law</title>
<simpara>For the purpose of this chapter, the terms below will have the following meanings:</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>Free and Open Source Software (FOSS)</emphasis>
</term>
<listitem>
<simpara>
software subject to an Open Source<footnote><simpara>For a definition of Open Source, please see the &#8220;Open Source Definition&#8221; by the Open Source Initiative (OSI).</simpara></footnote> license granting the right to use, analyze, modify and improve the said software by making its source code freely available to users.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>Proprietary software</emphasis>
</term>
<listitem>
<simpara>
computer software that is the exclusive property of its developers/publishers and which can only be copied or used in compliance with the owner&#8217;s licensing agreements, their source code being rarely made available.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<section id="_common_legal_issues_in_relation_with_foss">
<title>Common legal issues in relation with FOSS</title>
<simpara>We shall analyze in this section the legal issues regularly discussed in relation to Open Source Software, starting with the question of copyright protection of FOSS and then addressing the questions of enforcement of FOSS licenses and of the consequences of a breach of such licenses under applicable Swiss law.</simpara>
</section>
<section id="_foss_under_swiss_copyright_law">
<title>FOSS under Swiss copyright law</title>
<section id="_characterization_of_foss">
<title>Characterization of FOSS</title>
<simpara>One major issue in relation with copyright law that takes on an important dimension with respect to Open Source Software is the question of characterization. Indeed, one of the legal difficulties in FOSS consists of determining who is entitled to issue a license or to bring a lawsuit in case of infringement, or in determining the duration of the protection of the software. These issues can be solved by the characterization of the Open Source Software either as a <emphasis>joint work</emphasis> or as a <emphasis>derivative work</emphasis> as defined in the Copyright Act.</simpara>
<simpara>FOSS shall be considered a joint work under Swiss law when two or more persons have worked in common on the development of original and unique software for a determined period of time<footnote><simpara>Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 7 No. 4.</simpara></footnote>. Thus, when several developers have worked together for the purpose of creating original software, the result will usually be considered a joint work in the sense of copyright law, each developer being a coauthor.</simpara>
<simpara>The question becomes more complicated when unfinished software is created and then made available under an Open Source license for the purpose of being further developed by its users. In such cases, it will be hard to establish that the original developer and the user worked in collaboration with a common purpose, i.e. the creation of original software. Thus, a common creation will rarely be found, and the software which has been modified or improved by the user will most of the time be considered a derivative work in the sense of Section 3 SCA. The creator(s) of this new version of the software will therefore be a new author (or new authors) of a new work, this characterization giving rise to different rights.</simpara>
</section>
<section id="_rights_and_obligations_of_the_original_coauthors">
<title>Rights and obligations of the original coauthors</title>
<simpara>The coauthors of a protected work are the joint holders of the copyright pursuant to Section 7 SCA and as such form a sui generis legal tenancy. The co-authorship and its legal consequences will have an impact on two main questions in relation with Open Source: (i) who is entitled to give a license and (ii) who has the power to act in case of infringement?</simpara>
<simpara>As regards to the first issue, the legal regime that applies to coauthors, which is a regime of joint tenancy imposed by law but not defined by the legislator, implies that no assignment can be awarded nor license granted on the software without the common consent of <emphasis>all coauthors</emphasis><footnote><simpara>See I.3 (b) above; G. Fröhlich-Bleuler, Uhreber- und vertragsrechtliche Aspekte der Open Source Software, in Jörg / Arter, IT-Verträge, Bern 2007, p. 194.</simpara></footnote>. This system can be highly burdensome, especially in relation with Open Source, where the main purpose is to make software freely available to everyone and to allow users to benefit from further developments. Although the strictness of this rule is partially lessened by the obligation for all coauthors not to withhold their consent without motive<footnote><simpara>Section 7, Paragraph 2 SCA ; M.J. Widmer, Open Source Software&#8201;&#8212;&#8201;Urheberrechtliche Aspekte freier Software, p. 81.</simpara></footnote>, the regime of joint ownership can be extremely limiting, especially in the context of Open Source where it is essential to identify the person entitled to grant the Open Source license, and where the requirement of obtaining all the coauthors' consents would be considered a hurdle to free distribution. The coauthors can, however, derogate to the legal regime with a convention entitling one or several of the coauthors to represent them all for the exercise of rights of use.</simpara>
<simpara><emphasis>Best practices</emphasis> : In order to escape from the burdensome legal regime of co-authorship, we would advise authors of Open Source software to join the Free Software Foundation (FSF) which provides a system of assignment of the author&#8217;s copyright to the FSF, which will then be in charge of the management of the rights<footnote><simpara>E. Moglen, Why FSF Gets Copyright Assignment From Contributors, <ulink url="http://www.gnu.org/licenses/whyassign.Html">http://www.gnu.org/licenses/whyassign.Html</ulink> ; O. Johnny, M. Miller, M. Webbink, Copyright in Open Source Software&#8201;&#8212;&#8201;Understanding the Boundaries, IFOSS Law Review, Vol. 2, Issue 1.</simpara></footnote>.</simpara>
<simpara>Regarding the second issue relating to the ability to bring a claim in case of infringement, Swiss law authorizes any coauthor to act but it will always be on behalf of all the coauthors<footnote><simpara>Section 7, Paragraph 3 SCA.</simpara></footnote>. This system facilitates the protection of the software by allowing any coauthor to act independently on his/her own and by automatically ensuring that all coauthors will benefit from the claim in case of a positive result. The legal regime however does not create a similar system of solidarity in case of a claim for infringement by a third party against the coauthors: under Swiss law, a claim can only be brought against one coauthor and still be valid, but the coauthor shall only be liable for his/her share of the work&#8201;&#8212;&#8201;the work being divided in equal shares by the number of coauthors without regard to the actual input of each co-author. Such a system allows a third party to enforce its rights without having to identify all coauthors, but it also protects each coauthor from full liability.</simpara>
</section>
<section id="_authors_of_a_derivative_work">
<title>Authors of a derivative work</title>
<simpara>The characterization of portions of Open Source software as a derivative work will also have an impact on the rights of the author, the main legal issue relating to his/her ability to further distribute FOSS. In the majority of cases, the user who further develops Open Source software, either by modifying or improving it, will be considered the author of a derivative work and as such own a copyright on what has been modified&#8201;&#8212;&#8201;inasmuch as this improvement or modification can be protected by copyright, i.e. is original, which will usually be the case<footnote><simpara>G. Fröhlich-Bleuler, op. cit., p. 194.</simpara></footnote>. But if the author wants to distribute the modified software to other users, it is necessary to have the consent of the original author (or coauthors) since the original work is incorporated in the derivative one. For most FOSS licenses, the original author already consents to a further distribution of FOSS by its users, and therefore the consent of the original author will not be an issue (See GPL, Mozilla, etc.). However, it may be the case that the Open Source software has been freely distributed under a certain license that does not allow any further distribution by the end user or any distribution of the modified software<footnote><simpara>See for instance the Apple Public Source License 2.0 or the LaTex Project Public License (LPPL) (<ulink url="http://www.opensource.org/licenses/category">http://www.opensource.org/licenses/category</ulink>).</simpara></footnote>, in which case the author of the new derivative work will need to obtain the consent of the original developer(s) to license his/her modified software under a new FOSS license.</simpara>
</section>
<section id="_assignement_of_copyright">
<title>Assignement of copyright</title>
<simpara>As we have seen in section I.3 above, the SCA provides for a special rule regarding computer programs that are created by an employee as part of his/her employment obligations. In such cases, although the programmer remains the author of the protected program, the employer will automatically own all of the exclusive rights of use on such programs. Thus, the employer will be the entity with the authority to validly license the software under an Open Source license, with no need to obtain the employee&#8217;s consent<footnote><simpara>Section 17 SCA ; G. Frohlich-Bleuler, op. cit. p. 195.</simpara></footnote>. The benefit of this rule can be that several developers may create a company together, for which they work and which would automatically hold the right to license the created software, without requiring the conclusion of a convention for the management of the rights of all coauthors for each newly created piece of software, in this way escaping from the burdensome system of co-authorship.</simpara>
</section>
</section>
<section id="_moral_copyrights">
<title>Moral copyrights</title>
<simpara>FOSS being protected by copyright, the developer is thus an author as we have clearly established, and as such, he/she still owns a moral copyright on the licensed software. Therefore, the modifications or improvements of the software, although authorized by the license, cannot infringe upon his/her moral copyright, and more specifically cannot harm the author&#8217;s personality<footnote><simpara>Section 11, Paragraph 2 SCA.</simpara></footnote>. The question of whether a modification of the software will infringe upon the author&#8217;s personality rights will be established on a case by case basis, and it will very rarely be found under Swiss law in the context of computer programs<footnote><simpara>M.J. Widmer, Open Source Software, p. 134 ; some Swiss authors even deny that any modification of computer software could ever infringe upon the author&#8217;s moral rights.</simpara></footnote>. This is even truer in the case of FOSS, where the source code has been disclosed, and therefore the programming language made available to all users for the purpose of being modified. In such a context, it will be extremely difficult to establish any harm to the developer&#8217;s personality, the only case being when his/her reputation as a programmer would be damaged by the subsequent modifications. Such harm will however be highly difficult to establish in the case of FOSS, and more particularly if the software is made available under a GPL, since this license creates an obligation for subsequent users/modifiers to give explicit notice of their modifications<footnote><simpara>Section 5 GPL v3 : &#8220;The work must carry prominent notices stating that you modified it, and giving a relevant date&#8221; ; Section 2 GPL v2 : &#8220;You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change&#8221;.</simpara></footnote>, with the consequence that the changes will not be attributed to the original author and therefore not harm his/her reputation. It is however important to bear in mind that the broad right to modify the original software granted by a FOSS general license can still be limited by the original author&#8217;s enforcement of his/her moral right<footnote><simpara>A. Metzger &amp; T. Jaeger, Open Source Software and German Copyright law, IIC 2001 Heft 01, p.65-6.</simpara></footnote>.</simpara>
</section>
<section id="_enforcement_of_foss_licences">
<title>Enforcement of FOSS licences</title>
<section id="_general_contract_law_issues">
<title>General contract law issues</title>
<simpara>Based on the above definition, the specificity of FOSS is that the source code of a computer program is made freely available to users through the delivery of a FOSS license. Yet, in order to enforce such a license, the latter needs to have been validly concluded between the concerned parties and its content needs to comply with the local applicable law&#8201;&#8212;&#8201;which also raises questions as regards to the law applicable to the contract and more general issues of conflict of laws (see IV.1 below).</simpara>
<simpara>Assuming that the FOSS license is subject to Swiss law, the main contract law issues in relation with FOSS would therefore relate to the valid conclusion of the said license, the identification of the parties to that license, as well as the validity of its content.</simpara>
<simpara>As a preliminary remark, it should be noted that Swiss authors generally agree that a FOSS license should be analyzed in the context of contract law and should not be considered to be a unilateral legal act<footnote><simpara>G. Fröhlich-Bleurer, op. cit. p. 184.</simpara></footnote>. Under Swiss law, a contract is defined as a bilateral or multilateral legal act by which the parties exchange the expression of their matching intents (meeting of the minds)<footnote><simpara>Section 1 of the Swiss Code of Obligations (SCO).</simpara></footnote>. Pursuant to that definition, a first issue to consider is how the FOSS license is validly concluded, i.e. how does the meeting of the minds occur?</simpara>
<simpara><emphasis>Conclusion of a binding contract</emphasis></simpara>
<simpara>Under Swiss law, it is generally admitted that a contract can be validly concluded on the Internet, simply by clicking on a &#8220;Download&#8221; or &#8220;I agree&#8221; button<footnote><simpara>A. Cherpillod Giacobino, Internet dans la conclusion du contrat et les solutions de paiement, in SJ 2003 II p. 405.</simpara></footnote>. Therefore, a FOSS license can be validly concluded between the author and the user when he/she downloads the Open Source software after reading the license to which the use of the software is subject and clicking on the &#8220;I agree&#8221; button. The FOSS license is thus concluded between the right holder and the user by the delivery of the software to the user or his/her access to it. The question of the conclusion of the license is however more complicated when the software is transferred without the user having knowledge of the FOSS license governing it. It is indeed common that a user acquires Open Source software without coming across the FOSS license under which the rights are granted<footnote><simpara>On that matter, see also Section 9 of the GNU GPL v3 that states that &#8220;You are not required to accept this license in order to receive or run a copy of the Program&#8221;.</simpara></footnote>.</simpara>
<simpara>In such a case, Swiss scholars consider that the original author of FOSS and the end user are not bound by a license or any other agreement<footnote><simpara>G. Fröhlich-Bleuler, op. cit. p. 188-9.</simpara></footnote>. The consequence of such a situation is that the user will not benefit from the rights of the FOSS license as long as he/she is not aware of its existence: in other words, the user will not be entitled to modify or improve the software until he/she is bound by the conditions of the FOSS license, with the risk arising that any unauthorized modification of the source code will be considered to constitute copyright infringement. Thus, should no copy of the FOSS license be communicated to the user together with the software, then no valid license can be concluded and therefore no modification of the software will be considered valid and covered by the FOSS license. The content of the FOSS license will be considered as the expression of an offer by the licensor (i.e. the author of the software or the holder of the copyright) to conclude an agreement governing the use of the software. Indeed, under Swiss law, an offer in the sense of contract law does not need to be addressed to a specific person and it can be expressly or tacitly accepted by any recipient<footnote><simpara>Section 1, paragraph 2 Swiss Code of Obligations (SCO) : &#8220;This manifestation can be express or implied&#8221; ; for a complete discussion, see M. Jaccard, La conclusion de contrats par ordinateur&#8201;&#8212;&#8201;Aspects juridiques de l'échange de données informatisées (EDI), ASR, Berne 1996.</simpara></footnote>. Thus, the user who complies with the provisions and conditions contained in the FOSS license will be considered as having validly accepted the offer and the license will be validly concluded and binding upon the parties<footnote><simpara>Under Swiss law, the expression of the party&#8217;s intent can result from concrete actions that reveal its intent to be bound by the submitted offer ; P. Engel, Traité des obligations en droit Suisse, Berne 1997, p. 130; ATF 123 III 53 JdT 1999 I 179.</simpara></footnote>. This raises however the question of the duration of the validity of the offer and the possibility for the licensor to withdraw such an offer. According to Swiss scholars, the offer will remain binding upon the licensor as long as the user has in good faith the possibility of validly concluding the contract by the simple exercise of the conditions of use, and it will therefore be extremely difficult for the licensor to withdraw his/her offer and avoid the conclusion of a license agreement on the Open Source Software<footnote><simpara>G. Fröhlich-Bleuler, op. cit. p. 221-2.</simpara></footnote>.</simpara>
<simpara>If no license agreement has been concluded between the user and the licensor, the modification of the software by the user could constitute a copyright infringement, which may trigger civil as well as criminal liability. The user&#8217;s liability, however, will most probably be reduced or at least strongly limited in such circumstances, a Court being likely to take into consideration the concomitant liability of the author who did not properly attach the Open Source license to the distributed software, therefore giving rise to legal uncertainty.</simpara>
<simpara><emphasis>Best Practices</emphasis> : It is always recommended to accompany the software with the FOSS general license under which it is offered to be granted, including licenses that do not require so, in order to avoid unclear situations where it is unsure whether a binding contract exists between the parties, because it will otherwise depend on the interpretation of the user&#8217;s actions to determine whether he/she intended to be bound or not.</simpara>
<simpara><emphasis>Determination of the parties to the FOSS license</emphasis></simpara>
<simpara>Along with the question of whether a valid FOSS license has been concluded with the transfer of the software, the other issue to be considered in relation to Open Source is to determine who is a party to that license agreement.</simpara>
<simpara>The situation is particularly complicated when the user himself/herself starts licensing the modified software and so on. As already mentioned, a FOSS license is always concluded between the <emphasis>author</emphasis> of the Open Source software, who is the licensor, and the <emphasis>user</emphasis> of the software who is the licensee. When there are several authors of the work however (either coauthors or several authors of a derivative work), the license must be granted by all authors and the conditions of use of the FOSS license towards all of them will be binding upon the user. This situation is generally solved by the license itself which will contain a clause according to which the user, by accepting the conditions of the license, will automatically be bound to all previous authors of the software<footnote><simpara>See Section 10 GNU GPL v3 : &#8220;Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License&#8221; or Section 6 of the GNU GPL v2 : &#8220;Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions&#8221;.</simpara></footnote>. This mechanism is authorized under Swiss law and therefore creates a valid contractual relationship between all parties.</simpara>
<simpara><emphasis>Violation of the FOSS license&#8201;&#8212;&#8201;Breach of contract or Copyright infringement?</emphasis></simpara>
<simpara>The question of determining whether a violation of the FOSS license constitutes a breach of contract or a copyright infringement may have a certain impact in Switzerland as regards procedural issues as well as potential remedies to which the authors may be entitled. The protection for Open Source software can be based on both legal grounds, and the claim will depend on the type of violation that has occurred.</simpara>
<simpara>Thus, the copyright holder will be entitled to invoke a copyright infringement for the cases in which the user does not give proper credit notice or modifies the software when he has only been given the right to use it, whereas the claim of a user brought in order to obtain the disclosure of the source code will only be based on contract law since it only constitutes a breach of the license agreement and not a copyright infringement. It is however conceivable that an action consists of both a breach of contract and an infringement to copyright, in which case the claimant will be able to invoke both violations and the Court will usually have proper jurisdiction on both.</simpara>
<simpara>Some differences however exist between a claim based on copyright law and a claim based on contract law, in particular from a procedural point of view. The Swiss legal system being a federal system, a claim is usually brought in front of a local cantonal court before ending up in front of the Swiss Supreme Court; for copyright claims however, there is only one unique competent jurisdiction at the cantonal level before an appeal can be brought in front of the Swiss Supreme Court, whereas a claim based on contract law may go through several cantonal appeals before ending up in front of the Swiss Supreme Court<footnote><simpara>See Section 64 SCA. A unified civil procedure act will come into force on January 1st, 2011 and replace the 27 civil procedure codes currently in force within the country ; this legal modification will however not affect the system of one unique competent jurisdiction as regards to copyright which will remain into place.</simpara></footnote>.</simpara>
<simpara>In addition to this procedural difference, the remedies in contract law and copyright law that would be applicable to a violation of a FOSS license can differ in some respects, reason why the claimant will often use both grounds in front of the court<footnote><simpara>M.J. Widmer, Open Source Software, p. 106-7.</simpara></footnote>. Indeed, although damages can be asked both in case of copyright infringement and breach of contract, contract law&#8217;s sole alternative remedy will be limited to injunction for specific performance, whereas the SCA provides for more specific remedies, such as the prohibition of further distribution of the infringing copy and/or its destruction<footnote><simpara>Section 97 and 107-109 SCO.</simpara></footnote>. In case of copyright infringement, the author will also be entitled to ask for a declarative judgment of his/her quality of author<footnote><simpara>Section 61 SCA.</simpara></footnote>, or to ask for an injunction to prevent the infringement from happening or to make it stop in cases where the infringement is still producing effects<footnote><simpara>Section 62 SCA.</simpara></footnote>. It should also be noted that Swiss copyright law additionally makes it a criminal offence to perform most acts of copyright infringement<footnote><simpara>Section 67 SCA makes it a criminal offence to perform the following actions without right : (1) use a work under a false designation, (2) disclose a work, (3) modify a work, (4) use a work for the purpose of creating a derivative work, (5)make copies of a work, (6) offers the work to the public or distribute it by any other means, publicly represent or perform a work, broadcast the work (&#8230;) rent a software.</simpara></footnote>.</simpara>
</section>
<section id="_warranty_and_liability">
<title>Warranty and Liability</title>
<simpara>As regards FOSS, there are two main aspects to be analyzed in this section: one relates to the warranty granted or more generally excluded by the licensor, and the second relates to the validity of a waiver of the licensor&#8217;s liability.</simpara>
<simpara><emphasis>Exclusion of warranty</emphasis></simpara>
<simpara>Under Swiss law, the regime applicable to the exclusion of warranty will depend on the characterization of the license that will determine the applicable contract law rules. Swiss contract law sets out general rules applicable to all types of contracts and specific rules regulating specific types of contracts (&#8220;contrats nommés&#8221;)<footnote><simpara>P. Engel, Traité des obligations en droit suisse, Berne 1997, p. 175.</simpara></footnote>. License agreements are not specifically regulated under Swiss contract law but are considered as &#8220;sui generis contracts&#8221;<footnote><simpara>ATF 96 II 154, ad p. 156 ; P. Engel, Contrats de droit suisse, Berne 2000, p. 774.</simpara></footnote> and are therefore subject to the general rules on contracts. In some instances however, a court may apply some rules of specifically regulated agreements by analogy to a license agreement when it is deemed appropriate<footnote><simpara>K. Troller, Manuel du droit suisse des biens immatériels, p. 722.</simpara></footnote>, and Swiss legal scholars have therefore identified specific rules that may be applicable to FOSS licenses.</simpara>
<simpara>Although the Open Source Definition provides in the Section 1 that no royalties or fees should be perceived by the licensor under a FOSS license for the selling or giving away of the Open Source software<footnote><simpara>Open Source Definition, Section 1 : &#8220;The license shall not restrict any party from selling or giving away the software as a component of an aggregate software distribution containing programs from several different sources. The license shall not require a royalty or other fee for such sale&#8221;.</simpara></footnote>, the distribution of such software can be included in the sale of an aggregate software which can be done against payment or a fee may be charged for the physical act of the transfer. In such cases, Swiss scholars have found that the rules of sales contract could be applicable to the FOSS license, which would be subject to the limitations of the exclusion of warranty<footnote><simpara>U. Widmer, Gutachten betreffend Rechtsfragen bei Beschaffung und Einsatz offener Software in des Schweizerisches Bundesverwaltung (Projekt OPUS), p. 54.</simpara></footnote>. Pursuant to Section 199 SCO, a clause excluding all warranties in a sales contract is void in the case of fraud. Thus, a clause such as Section 15 of the GNU GPL v3 or Section 11 of the GNU GPL v2 excluding all kinds of warranty could be found non-valid under Swiss law if the transfer of the Open Source Software incorporates elements that can be assimilated to a sales contract and would therefore not be enforceable in cases of fraud. The invalidity of the clause excluding all warranties will however not affect the validity and enforceability of the rest of the license pursuant to the principle of severability.</simpara>
<simpara>On the other hand, should the Open Source software be transferred entirely free of charge, such a transfer could fall under the rules of donation, applicable by analogy as regards to the rules on the exclusion of warranty<footnote><simpara>See Section 239 SCO.</simpara></footnote>. Yet, in case of a donation, Section 248, paragraph 2 SCO makes the exclusion of all warranties valid. In that context, the provisions from the GPL mentioned above, excluding all types of warranties would be deemed valid under Swiss law<footnote><simpara>M.J. Widmer, Open Source Software, p. 181.</simpara></footnote>.</simpara>
<simpara><emphasis>Waiver of liability</emphasis></simpara>
<simpara>In addition to the exclusion of warranties, most FOSS licenses contain a provision waiving all liability of the author/licensor for damages (e.g. article 16 GNU GPLv3 &amp; article 11 GNU GPL v2). Some of these provisions reserve however the mandatory provisions of the applicable law<footnote><simpara>See for example Section 16 GNU GPL v3 : &#8220;In no event unless required by applicable law or agreed to in writing will any copyright holder ?&#8230;? be liable to you for damages ?&#8230;?&#8221;.</simpara></footnote>. Assuming that Swiss law is applicable to a FOSS license, the waiver of liability would not be valid in case of fraud or gross negligence<footnote><simpara>See Section 100 SCO ; W. Straub, Informatik Recht : Einführung in Softwareschutz, Projektverträge und Haftung; U. Widmer, Projekt OPUS, p. 54.</simpara></footnote>. Any other exclusion of liability for damages resulting from the use of the Open Source software, which is not covered by the cases of gross negligence and fraud, shall therefore be considered valid<footnote><simpara>M.J. Widmer, Open Source Software, p. 182.</simpara></footnote>.</simpara>
</section>
<section id="_the_copyleft_principle">
<title>The copyleft principle</title>
<simpara>A &#8220;copyleft&#8221; license is a license by which the licensor grants the right to use, distribute and modify the computer program to a licensee, under the condition that all further distributions of the modified software make the work available in a form that facilitates further modification and use the same license. Not all FOSS licenses are &#8220;copyleft&#8221; licenses (for instance the BSD and the Apache licenses are not &#8220;copyleft&#8221;, whereas the GPL and the LGPL are). In the absence of a &#8220;copyleft&#8221; clause, a user that has modified the Open Source software is entitled to integrate his/her new work in another program and sell it as proprietary software, or simply to refuse access to the source code in further distributions of the work<footnote><simpara>G. Fröhlich-Bleuler, op. cit. p. 207.</simpara></footnote>.</simpara>
<simpara>One issue related to the &#8220;copyleft&#8221; principle is the question of the compatibility of various FOSS licenses with each other. A license that does not incorporate a &#8220;copyleft&#8221; clause can indeed be considered incompatible with other FOSS licenses, which can lead to limitations for the re-distribution of the software by the user<footnote><simpara>On that issue, a list of all FOSS licenses compatible with the GPL has been published here : <ulink url="http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses">http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses</ulink>.</simpara></footnote>. The issue can however be solved conventionally by a clause integrated in the Open Source License that will determine which other Open Source licenses are compatible and can therefore be used by the users to license their modified version of the software<footnote><simpara>See G. Fröhlich-Bleuler, Die neue Version des GNU Public License, in Jusletter 21. Juli 2008.</simpara></footnote>.</simpara>
<simpara>This principle raises also other legal issues, in particular as regards the integration of a part of Open Source software into proprietary software : is the user under the obligation to make the full new software available under a FOSS license or is it limited to the part of the code developed under an Open Source license? Swiss scholars agree to say that in such cases, the new software constitutes a derivative work in the sense of copyright law, and therefore, the part of the code originating from Open Source software remains subject to the conditions of the Open Source license that has been granted by the original author.</simpara>
</section>
<section id="_remedies_8201_8212_8201_calculation_of_damages_in_case_of_infringement">
<title>Remedies&#8201;&#8212;&#8201;Calculation of damages in case of infringement</title>
<simpara>One of the remedies in case of breach of the FOSS license being the possibility to claim for damages, the delicate question consists in determining the amount of these damages.</simpara>
<simpara>A claim for damages, in cases of copyright infringement as well as in cases of breach of contract, is regulated by the general rules of the Swiss Code of Obligations (SCO). Pursuant to Section 42 SCO, the claimant has the burden to prove the existence of a damage. The amount of the damages corresponds to the difference between the current capital of the claimant and the capital he/she would own if the breach had not occurred<footnote><simpara>ATF 122 III 463.</simpara></footnote>. In case of infringement to intellectual property rights however, it is not always easy for the claimant to compute the claimed damages, and Swiss law does not require him/her to file a claim stating a precise amount<footnote><simpara>K. Troller, Manuel du droit suisse des biens immatériels, p.1043.</simpara></footnote>. The claimant must however provide the Court with sufficient elements to calculate the amount of damages to award, based on the full instruction of the case and the review of the evidence.</simpara>
<simpara>In cases of copyright infringement, the most common basis for a court in computing damages is the amount of failed opportunities of the claimant due to the copyright infringement<footnote><simpara>ATF 63 II 277, ad. p. 280.</simpara></footnote>. It may, however, be extremely difficult to establish that the infringement resulted in the loss of opportunities for the copyright holder, and the amount of damages can also be computed on the basis of the royalties that the right holder would have received, should the protected work have been used under a validly granted license<footnote><simpara>K. Troller, Manuel du droit suisse des biens immatériels, p.1046; Y. Benhamou, Dommages-intérêts suite à la violation de droits de propriété intellectuelle, Genève 2013, p.125 ff.</simpara></footnote>. In the absence of any case in relation to Open Source software in Switzerland, it is difficult to determine in advance which method a court would use to compute damages for the case of a breach of a FOSS license. It would however most likely include the judicial costs of the prevailing party, as it is common in Switzerland for the losing party to bear the judicial costs of the adverse party<footnote><simpara>ATF 81 II 534, JdT 1956 I 269 ; Section 106 of the new unified Civil Procedure Act (CPA).</simpara></footnote>.</simpara>
</section>
</section>
</section>
<section id="_foss_case_law_in_switzerland">
<title>FOSS case law in Switzerland</title>
<simpara>As of today, we are not aware of the reporting of any case law on FOSS in Switzerland. A decision was rendered by the Swiss Federal Administrative Tribunal on July 2, 2009, and later by the Swiss Federal Tribunal on March 11, 2011<footnote><simpara>Case from the Federal Administrative Court (FAC) of July 2, 2009, N B-3402/2009 and case from the Swiss Federal Court of March 11, 2011 No. 2C_783/2010.</simpara></footnote> and involved, among others, Red Hat Limited as a plaintiff in this case against the Federal Bureau for Buildings and Logistic. This case however did not relate to any legal issue in relation with Open Source Software but was in fact about Swiss public procurement issues.</simpara>
</section>
<section id="_legal_procedures">
<title>Legal procedures</title>
<simpara>We will start by analyzing briefly the applicable principles of conflict of laws that would give jurisdiction to a Swiss court and lead to the application of Swiss law. We will then provide the reader with a short overview of possible judicial proceedings in Switzerland in case of infringement or breach of the FOSS license.</simpara>
<section id="_application_of_swiss_law_pursuant_to_private_international_law_pil">
<title>Application of Swiss law pursuant to private international law (PIL)</title>
<simpara>In most cases, infringement and breach of a FOSS license will involve foreign players located in different countries. It is therefore important to determine (i) which court should have jurisdiction over this case and (ii) which substantive law the court will have to apply to the case.</simpara>
<simpara>Regarding the competent jurisdiction to hear the case, unless the parties have incorporated a valid choice of court clause in the license agreement, Section 109, paragraph 1 of the Swiss Private International Law Act (PILA) provides that the competent court which should hear intellectual property claims is the Swiss court at the defendant&#8217;s domicile, or, in the absence of domicile, the court at the place where the protection is sought. This provision designates the competent court to hear cases of <emphasis>infringement</emphasis> of intellectual property right and sets as a general rule that the Swiss courts of the domicile of the defendant will have jurisdiction over all cases of infringement, whether there has been an infringement on a Swiss or a foreign right<footnote><simpara>B. Dutoit, Droit international privé suisse, Bâle 2005, 4e édition, p. 348.</simpara></footnote>. This rule differs in some respect with the conflict rule of the Lugano Convention of September 16, 1988 that sets as the competent jurisdiction to hear infringement cases, the courts of the defendant&#8217;s domicile or the court of the place where the harmful event occurred<footnote><simpara>Section 2 and 5 of the Lugano Convention on jurisdiction and the enforcement of judgments in civil and commercial matters, RS 0.275.11.</simpara></footnote>.</simpara>
<simpara>In cases of a contractual breach only of the FOSS license, which does not constitute a copyright infringement, Sections 112 and 113 PILA provide that the court of the domicile or the habitual residence of the defendant, or, if the defendant has no domicile or does not reside in Switzerland, the court of the place of performance of the contract has jurisdiction over the case.</simpara>
<simpara>As regards applicable law, the general principle of Swiss rules on conflict of laws is the freedom of the parties to a binding contract to agree upon a choice of law clause<footnote><simpara>Section 116 PILA ; K. Troller, Manuel du droit suisse des biens immatériels, p. 1209.</simpara></footnote>. This general principle also applies to contracts pertaining to intellectual property, in which a choice of law clause is allowed<footnote><simpara>Section 122, paragraph 2 PILA.</simpara></footnote>, but in the absence of which the law of the place where the grantor of the intellectual property right has his/her habitual residence is applicable. In specific cases of contracts pertaining to copyrights, in the absence of a choice of law clause, the applicable law will be the law of the place where the person having control over the server containing information has his/her residence, and not of the place where the actual server is located<footnote><simpara>B. Dutoit, Droit international privé suisse, Bâle 2005, 4e édition, p. 428.</simpara></footnote>. This rule however only applies to the contractual obligations of the parties and a different conflict rule exists for the questions of infringement of an intellectual property right. Pursuant to Section 110 PILA, the law applicable to infringement cases is the law of the State in respect of which intellectual property protection is sought. The parties can however agree upon the application of the law of the forum (lex fori) to damages claims <emphasis>after</emphasis> the harm has occurred<footnote><simpara>Section 110, paragraph 2 PILA.</simpara></footnote>. This ability for the parties to choose the lex fori is however limited to the question of the computation of damages and does not cover the preliminary question of infringement<footnote><simpara>B. Dutoit, Droit international privé suisse, Bâle 2005, 4e édition, p. 355.</simpara></footnote>.</simpara>
</section>
<section id="_overview_of_the_possible_proceedings_in_switzerland_in_case_of_infringement">
<title>Overview of the possible proceedings in Switzerland in case of infringement</title>
<section id="_civil_proceedings">
<title>Civil proceedings</title>
<simpara>On January 1st, 2011, a new unified civil procedure act came into force in Switzerland, and all cantons are therefore subject to the same procedural rules. The obligation for cantons to have a unique trial court as regards to copyright claims remains in force and has be confirmed by the new unified procedure<footnote><simpara>Section 64 SCA and Section 5 CPA.</simpara></footnote>. This rule applies to cases on issues of copyright infringement but also on issues of transfer of rights or on licenses to use copyrighted work, and therefore covers claims that could be filed in Switzerland in relation to a FOSS license. Following a decision from the unique cantonal trial court, an appeal will always be possible to the Swiss Supreme Court<footnote><simpara>Section 74 of the Federal Act on the Swiss Supreme Court.</simpara></footnote>.</simpara>
<simpara>The filing of provisional measures in relation to copyright claims is possible for the party that shows that a copyright infringement is likely to have occurred or is likely to occur in the near future<footnote><simpara>Section 65 SCA ; Decision from the Aargau court from June 5, 2007 in Sic ! 2008, p. 24.</simpara></footnote>. The provisional measures will usually be used for the preservation of evidence, for discovering the origin of counterfeiting goods, but it can also consist in the prohibition to use the contentious work, which will probably be the most useful in software cases<footnote><simpara>Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 65 No. 5.</simpara></footnote>.</simpara>
</section>
<section id="_criminal_proceedings">
<title>Criminal proceedings</title>
<simpara>Along with civil proceedings that can be initiated in case of breach of a FOSS license, the claimant may also press criminal charges against the potential infringer in front of a criminal court. There will be criminal proceedings only if initiated by the right holder, unless the infringer acted professionally in which case the judicial authorities can charge him/her automatically, and a crime will be found only if the infringer acted <emphasis>intentionally</emphasis><footnote><simpara>Section 67, 69 and 69a SCA ; Barrelet / Egloff, Le nouveau droit d&#8217;auteur, 67 No. 1ss.</simpara></footnote>. A new unified criminal procedure code also came into force on January 1st, 2011, and is now applied by all cantons in all criminal cases.</simpara>
</section>
</section>
</section>
<section id="_recommended_literature_or_websites">
<title>Recommended literature or websites</title>
<simpara>For more information about Open Source software and applicable Swiss law, we recommend the following specialized literature:</simpara>
<itemizedlist>
<listitem>
<simpara>
Mike J. Widmer, Open Source Software&#8201;&#8212;&#8201;Urheberrechtliche Aspekte freier Software, Stämpfli, Bern 2003.
</simpara>
</listitem>
<listitem>
<simpara>
Gianni Fröhlich-Bleuler, Urheber - und vertragsrechtliche Aspekte der Open Source Software, in: Jörg/Arter, IT-Verträge, Bern 2007.
</simpara>
</listitem>
<listitem>
<simpara>
Gianni Fröhlich-Bleuler, Die neue Version des GNU Public License, in Jusletter 21. Juli 2008.
</simpara>
</listitem>
<listitem>
<simpara>
Ursula Widmer, Gutachten betreffend Rechtsfragen bei Beschaffung und Einsatz offener Software in des Schweizerisches Bundesverwaltung (Projekt OPUS).
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</article>
