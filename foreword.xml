<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2017-05-18</date>
</articleinfo>
<section id="chap.history">
<title>A history of FOSS law and licensing</title>
<simpara>author:[Engelfriet,Arnoud]</simpara>
<simpara>Surprisingly, programmable computers are older than copyright law: Charles Babbage&#8217;s analytical engine of 1837 predates the Berne Convention for the Protection of Literary and Artistic Works (1886).  However, unlike the Convention, Babbage&#8217;s mechanical contraption designed to perform mathematical calculations never became a real-world success. Several special-purpose machines, such as the Hollerith tabulating machine, did sell on the market in the late 19th and early 20th century. The first computers in the modern sense only became available in the 1950s, thanks to ground-breaking research by John von Neumann and Alan Turing in particular.</simpara>
<simpara>Companies such as IBM that provided these computers as part of what we today would call &#8220;solutions&#8221;: businesses were provided with specially-programmed computers to support certain business activities.  Customers would pay for continued support and new programs as part of the deal, but no one would consider buying or selling computer programs by themselves.<footnote><simpara>Martin Campbell-Kelly, &#8220;Development and Structure of the International Software Industry, 1950-1990&#8221;, Business and Economic History 24/2 (1995): 73-110. Also see Richard M. Stallman, &#8220;The GNU Operating System and the Free Software Movement&#8221;, in: Open Sources: Voices from the Open Source Revolution, O&#8217;Reilly 1999.</simpara></footnote> Users would get together to share their in-house software developments with others, eventually leading to the building of pools of software. This was actually encouraged by most vendors, as it stimulated the sale of hardware that could use this software. One might thus say that the idea of free and open source is as old as the computing business itself.<footnote><simpara>Steven Levy, Hackers: Heroes of the Computer Revolution, Doubleday 1984. Also see Peter Salus, The Daemon, The Gnu, And The Penguin, Reed Media Services 2008.</simpara></footnote></simpara>
<section id="intro_shrinkwrap">
<title>Age of the shrink-wrap</title>
<simpara>New developments in computing power over the next decade caused a fundamental shift away from this model. A landmark event occurred in 1969 when IBM unbundled its hardware and software activities, effectively giving birth to the software industry as such.<footnote><simpara>Burton Grad, &#8220;A Personal Recollection: IBM&#8217;s Unbundling of Software and Services&#8221;, IEEE Annals of the History of Computing, vol. 24, no. 1, pp. 64-71, Jan.-Mar. 2002 and Thomas W.  Hamilton, &#8220;IBM&#8217;s unbundling decision: Consequences for users and the industry&#8221;, Programming Sciences Corporation, 1969.</simpara></footnote> A further stimulus for this market came from the personal computer, a low-cost alternative to the &#8220;big iron&#8221; mainframe computers that were mainly in use at the time. In the early 1970s, several do-it-yourself kits became available that allowed hobbyists to build their own personal computers, and in 1977 the Commodore PET and the Apple II appeared on the market as the first ready-to-use computers.<footnote><simpara>Paul E.  Ceruzzi, A History of Modern Computing, MIT Press 1998.</simpara></footnote> With hardware and software products separated, software as such was ready to develop as a market. But many software vendors were concerned about the viability of this market, as it was unclear which legal protection they would receive.</simpara>
<simpara>Debate among lawmakers and lobbyists led to various proposals, ranging from copyright and patent law to a <emphasis>sui generis</emphasis> right specifically designed to protect software. After much debate, a consensus emerged that copyright would be the most appropriate legal means.<footnote><simpara>&#8220;Legal Protection for Computer Programs: a Survey and Analysis of National legislation and Case Law&#8221; by Michael S.  Keplinger (document UNESCO/WIPO/GE/CCS/2). Also see the Model provisions on the protection of computer software, prepared by the International Bureau of the World Intellectual Property Organization, 1978.</simpara></footnote> The USA was the first to adopt copyright protection for software.<footnote><simpara>Computer Software Copyright Act of 1980, following the Final Report of the National Commission on New Technological Uses of Copyrighted Works (CONTU) of 31 July 1978.  Also see Mark A. Lemley et al., Software And Internet Law, Aspen Law &amp; Business 2000, pp. 34-35.</simpara></footnote> The European Economic Community followed in 1991 with its Software Directive,<footnote><simpara>Council Directive 91/250/EEC of 14 May 1991 on the legal protection of computer programs.</simpara></footnote> which was largely based on the US law but with more liberal provisions on reverse engineering. With copyright protection firmly in place, software vendors were able to sell their software &#8220;as a book&#8221; (to quote from the Borland software licenses) by charging royalties for each copy sold.<footnote><simpara>Thom Holwerda, &#8220;Borland in the 1980s: &#8216;Treat Software Just Like a Book&#8217;&#8221;, OSNews 15 oktober 2009, <ulink url="http://www.osnews.com/story/22342/Borland_in_the_1980s_Treat_Software_Just_Like_a_Book_">http://www.osnews.com/story/22342/Borland_in_the_1980s_Treat_Software_Just_Like_a_Book_</ulink>.</simpara></footnote>  This created a large market for software, sometimes called the &#8220;Age of the Shrink-wrap&#8221; because of the way that software was made available: in large, shrink-wrapped boxes.</simpara>
<simpara>Software distributors did something peculiar in this market: while software was offered &#8220;as a book&#8221;, they did not actually sell the software. They included long legal documents that solemnly declared that the software was merely licensed and that the user had no rights other than as provided in this license. The legal validity of these licenses has been hotly disputed but today seems to be grudgingly accepted in the general case.<footnote><simpara>See e.g. H. Ward Classen, A practical guide to software licensing for licensees and licensors, American Bar Association, Section of Business Law 2007, p. 149-152, Lawrence D. Graham, Legal battles that shaped the computer industry, Greenwood Publishing Group 1999, p. 119-125, Clive Gringras, &#8220;The Validity of Shrink-Wrap Licences&#8221;, International Journal of Law and Information. Technology 4(2), p. 77-111, R.H. Stern, &#8220;Shrink-wrap license restrictions-preempted?&#8221;, IEEE Micro 17(1), Jan/Feb 1997, p.  75-78 and David L. Hayes, &#8220;The enforceability of shrink-wrap license agreements on-line and off-line&#8221;, Fenwick &amp; West, March 1997. The most famous case was ProCD, Inc. v. Zeidenberg, 86 F.3d 1447 (7th Cir. 1996), in which the US appeals court held that a shrink-wrap license was valid and enforceable as a contract, provided they do not otherwise violate generally accepted principles of contract law.</simpara></footnote> Two areas of particular attention in these licenses are the restriction of statutory rights, such as the right to reverse engineer the software, and the disclaimer of all warranties and liabilities.</simpara>
<simpara>The right to reverse engineer is a peculiar one. As a general rule, buyers of a product are expected and permitted to examine what they buy and to discover how it works. Copyright (or patent) law may restrict the building and selling of cloned products, but the investigation itself is not restricted. For software, these licenses would put this expectation on its head. No one was permitted to discover how the licensed software works&#8201;&#8212;&#8201;not even if a compatibility issue or a serious bug arose. This gave the licensor a very comfortable position, as he could now charge maintenance fees for any and all work to be done on the software. Legislators did try to introduce at least some right to reverse engineer software for compatibility purposes, but these clauses are generally regarded as weak and risky to invoke.<footnote><simpara>In Europe, Directive 91/250/EEC provides a right to decompile if that is &#8220;indispensable to obtain the information necessary to achieve interoperability&#8221; but sets limitations so severe it is hard to come up with a real-world case that evidently would prevail in court. Also see Blaney Harper and Vaishali Udupa, &#8220;Drafting Electronic Software Licenses to Prevent Reverse Engineering&#8221;, Jones Day February 2004.</simpara></footnote></simpara>
</section>
<section id="foss_and_gpl">
<title>Free software and the GPL</title>
<simpara>As soon as software by itself started to become a viable market, access to software in its human-readable source code form was becoming more and more difficult. Software companies regarded their source code a treasured business secret (in today&#8217;s terms: their intellectual property) and severely restricted its access and distribution to third parties. For famous MIT hacker Richard M. Stallman, this &#8220;hoarding&#8221; of software was simply unacceptable. Software should be freely available to all, and its programmers should not be able to set legal or other restrictions on other people&#8217;s use of the code.<footnote><simpara>Richard M. Stallman, &#8220;The GNU Operating System and the Free Software Movement&#8221;, in: Open Sources: Voices from the Open Source Revolution, O''Reilly 1999. Also see Sam Williams, Free as in Freedom: Richard Stallman&#8217;s Crusade for Free Software, O&#8217;Reilly 2002. </simpara></footnote> In 1983, Stallman quit MIT and founded what would become the Free Software Foundation (FSF), an organisation dedicated to creating and stimulating software that would be freely available to all.</simpara>
<simpara>To help achieve this goal Stallman drafted the <emphasis>GNU General Public License</emphasis> or GPL, a software license that allows anyone to freely use, distribute and adapt the licensed software at no charge. The only restriction he added was that any adapted or extended version of the software could only be distributed under the GPL as well. This ensured the continued availability of the source code to anyone who came in contact with the software. With this license, he turned copyright on its head&#8201;&#8212;&#8201;an early name for the model is <emphasis>copyleft</emphasis>.</simpara>
<simpara>Fifteen years later, Stallman&#8217;s work was shown to be a resounding success. Almost single-handedly he had written most of the software needed to program and use a general-purpose computer. Only one significant part was missing: the <emphasis>kernel</emphasis>, the key part of a computer operating system that controls all software and interfaces with the underlying hardware. Operating systems are expensive and difficult to develop, but in 1991 a Finnish second-year computer science student announced he was going to create one as &#8220;just a hobby, won&#8217;t be big and professional&#8221;. His creation <emphasis>Linux</emphasis> (mixing his first name Linus and Unix according to hacker tradition) would become one of the most valuable pieces of software ever written.  Torvalds chose to use the GPL, calling it &#8220;one of the very best design decisions&#8221; he ever made.<footnote><simpara>Robert Young, &#8220;Interview with Linus, the Author of Linux&#8221;, Linux Journal, 1 March 1994.</simpara></footnote></simpara>
</section>
<section id="legal_entanglements">
<title>Legal entanglements around BSD</title>
<simpara>If not for a legal battle around free software elsewhere, Linux might not have been. The Berkeley Software Distribution (BSD) was a collection of extensions, patches and add-ons to the Bell Labs Unix operating system created at Berkeley University. Based on the principles of free and open source software, the BSD had already been available since about 1978. Over the years, BSD morphed into a complete operating system, culminating in the so-called Networking Release 2 in June 1991. All code was available under the BSD license, allowing anyone to use it provided credit was given to the original authors.</simpara>
<simpara>AT&amp;T, owners of the Unix copyrights at the time, felt that this release infringed on its copyrights and filed a lawsuit against the university.<footnote><simpara>Greg Lehey, The complete FreeBSD: documentation from the source, O&#8217;Reilly 2003, pp. 8-9.</simpara></footnote> In a counterclaim, Berkeley alleged that AT&amp;T had used BSD code without adhering to its license, as credits and copyright notices had been removed.<footnote><simpara>Marshall Kirk McKusick, &#8220;Twenty Years of Berkeley Unix&#8221;, in: Open Sources: Voices from the Open Source Revolution, O&#8217;Reilly 1999.</simpara></footnote> The suit dragged on until a settlement was obtained in 1994. By that time however the development of BSD had slowed down significantly, allowing Linux to gain developer attention.  Torvalds has observed he would not have created Linux if the BSD operating system had been available to him at the time.<footnote><simpara>Mike Linksvayer, &#8220;The Choice of a GNU Generation&#8201;&#8212;&#8201;An Interview With Linus Torvalds&#8221;, Meta magazine 1993.  <ulink url="http://gondwanaland.com/meta/history/interview.html">http://gondwanaland.com/meta/history/interview.html</ulink>.</simpara></footnote></simpara>
</section>
<section id="rise_of_oss">
<title>The rise of open source</title>
<simpara>With the Linux kernel available, the free software movement finally was in a position to make significant growth and maybe overtake the &#8220;proprietary&#8221; world. However, it only had limited success. Over the years, the FSF had developed a rather confrontational attitude towards companies that did not subscribe to its ideas, which made companies hesitant to adopt free software.<footnote><simpara>Bruce Perens, &#8220;The Open Source Definition&#8221;, in: Open Sources: Voices from the Open Source Revolution, O&#8217;Reilly 1999.</simpara></footnote> A related complication was that the GPL was often misunderstood by lawyers, creating a false belief that using any piece of GPL software in one&#8217;s product would require the &#8220;freeing&#8221; of the entire software stack.</simpara>
<simpara>In 1998 Netscape Communications announced that it would release the source code of its Web browser. This spurred a group of prominent free software developers to promote free software principles under the newly-coined term &#8220;open source&#8221;: collaboration between programmers world-wide who jointly improve software in a way that no individual company could achieve.<footnote><simpara>Eric S. Raymond, &#8220;Goodbye, &#8216;free software&#8217;; hello, &#8216;open source&#8217;&#8221;, 16 June 2007 <ulink url="http://www.catb.org/~esr/open-source.html">http://www.catb.org/~esr/open-source.html</ulink>. Also see Eric S. Raymond, The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary, O&#8217;Reilly 2001.</simpara></footnote> The Open Source Initiative (OSI) was subsequently founded as a public benefit corporation, which amongst other things offers a certification program for open source software licenses.<footnote><simpara>History of the OSI, <ulink url="http://www.opensource.org/history">http://www.opensource.org/history</ulink>.</simpara></footnote> Their trademark application on the term &#8220;open source&#8221; was refused. Certified licenses now wear the label &#8220;OSI Certified Open Source&#8221;.</simpara>
<simpara>The choice for the term &#8220;open source&#8221; has not been well received by the free software community. The main point of criticism is that &#8220;free software&#8221; focuses on freedoms for all users, while &#8220;open source&#8221; waters down the focus to just community-driven development.<footnote><simpara>Richard M. Stallman, Why &#8220;Open Source&#8221; misses the point of Free Software, GNU.org 24 September 2007, <ulink url="http://www.gnu.org/philosophy/open-source-misses-the-point.html">http://www.gnu.org/philosophy/open-source-misses-the-point.html</ulink>.</simpara></footnote>  In recent years the term <emphasis>free and open source software</emphasis> or FOSS has arisen as a neutral alternative, a practice which this law book also adheres to. A lesser-used variant is <emphasis>free/libre/open source software</emphasis> (FLOSS), which uses &#8220;libre&#8221; to clarify the meaning of free as in &#8220;freedom&#8221; rather than as in &#8220;at no charge&#8221;.</simpara>
</section>
<section id="legal_validity">
<title>Legal validity</title>
<simpara>There are hundreds of FOSS licenses, although they can be grouped roughly into three categories. The first category is often referred to as the <emphasis>academic licenses</emphasis>, which basically require that credit be given and the authors are shielded from warranty claims. The second category provides <emphasis>copyleft</emphasis>&#8201;&#8212;&#8201;the requirement that source code be made available to users, including derivative works. The third category is somewhat of a compromise: <emphasis>weak copyleft</emphasis> requires that source code of the software itself (and modifications to it) are shared but larger works may be kept proprietary. Most FOSS today is licensed under the GPL, the canonical copyleft license.<footnote><simpara>Top 20 Most Commonly Used Licenses in Open Source Projects, Black Duck Open Source Resource Center, April 2011.</simpara></footnote> The BSD license is the most popular academic license.  Netscape used the weak-copyleft Mozilla Public License when releasing its browser in 1998.</simpara>
<simpara>Much has been written about the legal validity of FOSS licenses in various jurisdictions.<footnote><simpara>Lawrence Rosen, Open Source Licensing, Prentice Hall PTR, 2005, Andrew M. St. Laurent, Understanding open source and free software licensing, O&#8217;Reilly 2004 and of course the very book you are reading now.</simpara></footnote> Legal debate focuses mostly on the copyleft provisions: what is the scope of a &#8220;derivative work&#8221; and how far can a license extend the obligation of relicensing under a copyleft license? Other legal areas of contention are the limitations of liability and the interpretation of rights and obligations under international law. However, the number of lawsuits worldwide challenging these licenses can be counted on the fingers of two hands. The aforementioned lawsuit around BSD may well be regarded as the first, at least in spirit.</simpara>
<simpara>In 2002, it looked like the GPL would have its day in court when the GPL-licensed MySQL database became subject of a lawsuit between owner MySQL AB and the US software company Progress.<footnote><simpara>Progress Software Corp. v. MySQL AB, Civil Action No. 01-11031 PBS, filed on June 15, 2001. </simpara></footnote> Progress had allegedly created a derivative work of MySQL by adding support for its own database format. However, after MySQL obtained a preliminary injunction, the parties settled before the question could be addressed by the court.</simpara>
<simpara>The Software Freedom Law Center has filed several lawsuits against misappropriation of GPL code. Several cases have been filed focusing on Busybox, starting with <emphasis>BusyBox vs Monsoon</emphasis> in 2007.<footnote><simpara>&#8220;On Behalf of BusyBox Developers, SFLC Files First Ever U.S. GPL Violation Lawsuit&#8221;, Software Freedom Law Center 20 September 2007. Other cases brought involved Xterasys, High-Gain Antennas and Verizon Communications. Compare Eben Moglen, &#8220;Enforcing the GNU GPL&#8221;, GNU.org 10 September 2001.</simpara></footnote> However, all cases so far have been settled out of court. Few others have brought cases. Two notable examples are <emphasis>SCO vs. IBM</emphasis> and <emphasis>Wallace vs. FSF</emphasis>. The less said about those legal disasters the better.<footnote><simpara>SCO vs. IBM was filed in 2003 as a $1 billion lawsuit alleging that IBM had somehow harmed SCO by contributing to Linux. Particular allegations involved copyright claims on number codes for Linux interfaces and the unconstitutionality of the GPL.  Wallace vs. FSF (467 F.3d 1104, 7th Cir. 2006) alleged the GPL was a form of illegal price fixing. His pro se lawsuit was thrown out after the plaintiff failed to state an actionable claim despite three chances to do so.</simpara></footnote></simpara>
<simpara>An important milestone was the 2008 JMRI lawsuit, focusing on model rail-road train software licensed under the little-used &#8220;Artistic License&#8221;. In a much-welcomed ruling, the US Federal appeal court ruled that the principle of open source licensing was a valuable goal that copyright law ought to support.<footnote><simpara>Jacobsen v. Katzer, 535 F.3d 1373 (Fed. Cir.  2008).</simpara></footnote> In addition, the court held that the source code sharing obligations were limitations of the copyright license and not mere covenants to the license. This distinction is important, as violating a license limitation allows the full force of copyright law to be used against the licensee. A mere covenant has to be addressed as a contract breach.<footnote><simpara>This touches upon the legal question whether a FOSS license is to be regarded as a contract, as a bare license, as a declaration of promissory estoppel or another legal construct. See e.g. Pamela Jones, &#8220;The GPL is a license, not a contract&#8221;, LWN.net 3 December 2003, <ulink url="http://lwn.net/Articles/61292/">http://lwn.net/Articles/61292/</ulink>, Eben Moglen, &#8220;Enforcing the GNU GPL&#8221;, GNU.org 10 September 2001, Lawrence Rosen, Open Source Licensing, Prentice Hall PTR, 2005 , page 53-54 and Axel Metzger and Till Jaeger, &#8220;Open Source Software and German Copyright Law&#8221;, IIC Vol. 32, 2001, p. 52.</simpara></footnote></simpara>
<simpara>In Germany, Linux kernel hacker Harald Welte did manage to achieve several legal successes against companies using his GPL-licensed netfilter software. Notably, Welte obtained injunctions against D-Link, Fortinet and SMC (Skype).<footnote><simpara>J. Höppner, &#8220;The GPL prevails: An analysis of the first-ever Court decision on the validity and effectivity of the GPL&#8221;, (2004) 1:4 SCRIPT-ed 628.</simpara></footnote>  Subsequently, German courts had little trouble accepting the GPL as a legally binding license agreement and enjoining those who did not adhere to its terms.<footnote><simpara>Most recently, the Regional Court of Hamburg found FANTEC GmbH guilty of violating the GPL in their media player. Notably, Fantec&#8217;s reliance on its suppliers was deemed insufficient. LG Hamburg 14.06.2013, AZ 308 O 10/13, <ulink url="http://www.ifross.org/sites/default/files/130618%20Urteil%20Fantec.pdf">http://www.ifross.org/sites/default/files/130618%20Urteil%20Fantec.pdf</ulink></simpara></footnote> Welte founded the <emphasis>GPL-violations.org</emphasis> project in January 2004 to raise public awareness of the infringing use of free software.<footnote><simpara>About the gpl-violations.org project, <ulink url="http://gpl-violations.org/about.html#history">http://gpl-violations.org/about.html#history</ulink></simpara></footnote> The project has reported numerous successful settlements and a 100% success rate in enforcing its licenses.</simpara>
</section>
<section id="towards_future">
<title>Towards the future</title>
<simpara>FOSS shows no sign of slowing down. Linux is widely in use in embedded environments (mobile phones, televisions, cars, robots) and the open source Firefox web browser is the most popular alternative to Microsoft&#8217;s Internet Explorer. Most of the infrastructure of the Internet runs on open source software.</simpara>
<simpara>Licensing-wise, FOSS is here to stay. There is consensus that the principles of FOSS are legally sound. FOSS licensing is also being recognized as valuable by policymakers. Lawsuits in the coming years may address some of the open issues, such as the scope of derivative works and liability for FOSS developers. More is to be expected from voluntary compliance and a growing maturity in how the legal community approaches FOSS licensing principles. We have come a long way already.</simpara>
</section>
</section>
</article>
